import logging

import letter

from keyboards.reply import koef_kb, del_kb

logger = logging.getLogger(__name__)

from curses.ascii import isdigit

from aiogram import F, types, Router
from aiogram.enums import ParseMode
from aiogram.filters import or_f, StateFilter, callback_data
from aiogram.filters.command import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InputFile
from sqlalchemy.ext.asyncio import AsyncSession

from data_base.orm_query import orm_get_products, orm_get_product, orm_get_training
from filters.chat_types import ChatTypeFilter
from aiogram.utils.formatting import as_list, as_marked_section, Bold

from handlers.menu_processing import get_menu_content
from keyboards import reply, inline
from keyboards.inline import MenuCallBack, get_callback_btns

rt = Router()
rt.message.filter(ChatTypeFilter(["private"]))



'''@rt.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("Hello!", reply_markup=reply.start_kb)

@rt.message(or_f(Command("menu"), F.text.lower() == "–º–µ–Ω—é"))
async def cmd_menu(message: types.Message):
    await message.reply("–í–æ—Ç –º–µ–Ω—é", reply_markup=reply.del_kb)

@rt.message(or_f(Command("mood"), F.text.lower() == "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∫–∞–∫–æ–µ —É –º–µ–Ω—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?"))
async def cmd_menu(message: types.Message):
    await message.reply("–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?", reply_markup=reply.mood_kb)
    .as_markup(
        resize_keyboard=True,
        input_field_placeholder="–ö–∞–∫–æ–µ —É –≤–∞—Å —Å–µ–π—á–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?"
    ))


@rt.message(or_f(Command('inline_keyboard'), F.text.lower() == "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞"))
async def process_command_1(message: types.Message):
    await message.reply("–ü–µ—Ä–≤–∞—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞", reply_markup=reply.inline_kb)

@rt.message(F.photo)
async def rollers(message: types.Message):
    #await message.reply("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º")
    await message.answer_photo(photo="https://avatars.dzeninfra.ru/get-zen_doc/1900266/pub_5e99f4f091221741687d5b9f_5e99f71e0efcae26c2f46bab/scale_1200")
'''


class FSM(StatesGroup):
    main__menu = State()
    #enter_report = State()
    target_state = State()
    sex_state = State()
    age_state = State()
    weight_state = State()
    height_state = State()
    koef_state = State()
    enter_stat = State()
    stat_entered = State()


@rt.message(CommandStart())
async def start_cmd(message: types.Message):
    media, reply_markup = await get_menu_content(level=0, menu_name="main")
    #await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–æ–≤–∞—Ç—å!")
    await message.answer_photo(media.media, caption=media.caption, reply_markup=reply_markup)


@rt.message(StateFilter("*"), Command("enter_meal_statistics"))
async def cmd_stat(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ –∏ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ, –≤—Ö–æ–¥—è—â–∏—Ö –≤ –≤–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏, –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n–ü—Ä–æ–¥—É–∫—Ç_–µ–≥–æ –º–∞—Å—Å–∞(–≤ –≥—Ä–∞–º–º–∞—Ö —á–∏—Å–ª–æ–º)\n–í—Ç–æ—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç_–µ–≥–æ –º–∞—Å—Å–∞\n(–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ)",
    )
    '''current_state = await state.get_state()
    if current_state == :'''
    await state.set_state(FSM.enter_stat)


@rt.message(StateFilter("*"), Command("report"))
async def cmd_stat(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–æ—Ç –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n",
    )
    user_data = await state.get_data()
    summ = user_data['summ']
    await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∫–∞–ª - " + str(user_data['cal']))
    await message.answer("\n–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –±–µ–ª–∫–∞ –∫–æ –≤—Å–µ–π —Å—ä–µ–¥–µ–Ω–Ω–æ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–∏—â–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç " + str(
        float(user_data['protein']) / summ * 100) + " –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤")
    await message.answer("\n–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∂–∏—Ä–æ–≤ –∫–æ –≤—Å–µ–π —Å—ä–µ–¥–µ–Ω–Ω–æ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–∏—â–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç " + str(
        float(user_data['fat']) / summ * 100) + " –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤")
    await message.answer("\n–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —É–≥–ª–µ–≤–æ–¥–æ–≤ –∫–æ –≤—Å–µ–π —Å—ä–µ–¥–µ–Ω–Ω–æ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–∏—â–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç " + str(
        float(user_data['carbohydrate']) / summ * 100) + " –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤")
    await state.clear()
    #await state.set_state(FSM.stat_entered)


@rt.message(FSM.enter_stat, F.text)
async def calc_cal(message: types.Message, state: FSMContext, session: AsyncSession):
    current_state = await state.get_state()
    if current_state == FSM.enter_stat:
        txt = message.text
        flag = True
        lst = txt.split("\n")
        d = dict()
        cal = 0
        protein = 0
        fat = 0
        carbohydrate = 0
        summ = 0
        for st in lst:
            if not flag:
                break
            st = st.split("_")
            if len(st) != 2:
                flag = False
                break
            prod = st[0]
            weight = st[1]
            prod = prod.replace(" ", "")
            if ',' in weight:
                weight = weight.replace(',', '.')
                for c in weight:
                    if not ('0' <= c <= '9') and c != '.':
                        flag = False
                        break
            if not flag:
                break
            weight = float(weight)
            product = await orm_get_product(session, prod)
            cal += weight * float(product.kkal) / 100
            protein = weight * float(product.belok) / 100
            fat = weight * float(product.fat) / 100
            carbohydrate = weight * float(product.carbohydrate) /100
            summ = weight

        if not flag:
            await message.reply("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        else:
            user_data = await state.get_data()
            if 'summ' in user_data:
                await state.update_data(summ=summ + user_data['summ'])
            else:
                await state.update_data(summ=summ)
            if 'cal' in user_data:
                await state.update_data(cal=cal + user_data['cal'])
            else:
                await state.update_data(cal=cal)
            if 'protein' in user_data:
                await state.update_data(protein=protein + user_data['protein'])
            else:
                await state.update_data(protein=protein)
            if 'fat' in user_data:
                await state.update_data(fat=fat + user_data['fat'])
            else:
                await state.update_data(fat=fat)
            if 'carbohydrate' in user_data:
                await state.update_data(carbohydrate=carbohydrate + user_data['carbohydrate'])
            else:
                await state.update_data(carbohydrate=carbohydrate)
            #await message.answer(str(user_data['summ']))
            #await state.set_data()
            #await state.clear()
            await message.answer("–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã")


@rt.callback_query(StateFilter("*"), MenuCallBack.filter())
async def menu(callback: types.CallbackQuery, callback_data: MenuCallBack, state: FSMContext):
    current_state = await state.get_state()
    if current_state == FSM.target_state:
        await state.set_state(FSM.main__menu)
    #print(callback_data.level, callback_data.menu_name)
    '''if callback_data.level == 2:
        text = as_marked_section(
            Bold("–°–ø–æ—Å–æ–±—ã –Ω–∞–≤–∞–ª–∏—Ç—å –∫—Ä–∏–Ω–∂–∞"),
            "–°–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –∫—Ä–∏–Ω–∂–æ–≤–æ–µ",
            "–°–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –∫—Ä–∏–Ω–∂–æ–≤–æ–µ",
            marker="üôà"
        )
        await callback.answer(text.as_html())'''
    #print(1111, callback_data.level, callback_data.menu_name)
    media, reply_markup = await get_menu_content(level=callback_data.level, menu_name=callback_data.menu_name)
    await callback.message.edit_media(media=media, reply_markup=reply_markup)
    await callback.answer()
    if callback_data.menu_name == "calculator":
        await state.set_state(FSM.target_state)


#func=lambda c: c.data == 'return'
@rt.callback_query(F.data.startswith('return'))
async def return_to_menu(callback: types.CallbackQuery):
    #print("callback")
    media, reply_markup = await get_menu_content(level=0, menu_name="main")
    await callback.message.edit_media(media=media, reply_markup=reply_markup)
    await callback.answer()


@rt.message(FSM.target_state, F.text)
async def formula(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == FSM.target_state:
        txt = message.text
        txt = txt.strip().lower()
        if txt == "–ø–æ—Ö—É–¥–µ—Ç—å" or txt == "–Ω–∞–±—Ä–∞—Ç—å –≤–µ—Å" or txt == "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å":
            flag = True
        else:
            flag = False

        if not flag:
            await message.reply("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        else:
            await state.update_data(target=txt)
            await state.set_state(FSM.sex_state)
            await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª(–ú –∏–ª–∏ –ñ)")


@rt.message(FSM.sex_state, F.text)
async def formula_2(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == FSM.sex_state:
        sex = message.text
        sex = sex.strip().upper()
        flag = True
        if sex != "–ú" and sex != "–ñ" and sex != "M":
            flag = False
        if not flag:
            await message.reply("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        else:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç)")
            await state.update_data(sex=sex)
            await state.set_state(FSM.age_state)


@rt.message(FSM.age_state, F.text)
async def formula_3(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == FSM.age_state:
        age = message.text
        age = age.strip()
        flag = True
        if not age.isdigit():
            flag = False
        else:
            age = int(age)
        if not flag:
            await message.reply("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        else:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å (—Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º)")
            await state.update_data(age=age)
            await state.set_state(FSM.weight_state)


@rt.message(FSM.weight_state, F.text)
async def formula_4(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == FSM.weight_state:
        weight = message.text
        weight = weight.strip()
        flag = True
        if not weight.isdigit():
            flag = False
        else:
            weight = int(weight)
        if not flag:
            await message.reply("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        else:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç (—Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º)")
            await state.update_data(weight=weight)
            await state.set_state(FSM.height_state)


@rt.message(FSM.height_state, F.text)
async def formula_5(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == FSM.height_state:
        height = message.text
        height = height.strip()
        flag = True
        if not height.isdigit():
            flag = False
        else:
            height = int(height)
        if not flag:
            await message.reply("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        else:
            await message.answer(
                text="–°–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–≤–æ–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                reply_markup=koef_kb)
            #"–£–∫–∞–∂–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—à–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ–¥–Ω–∏–º –∏–∑ –ø—è—Ç–∏ —á–∏—Å–µ–ª, —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –Ω–∏–∂–µ)\n\n(–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è: 1.3(–ø—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏), 1.5(–ø—Ä–∏ –Ω–∏–∑–∫–æ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏), 1.75(–ø—Ä–∏ —É–º–µ—Ä–µ–Ω–Ω–æ–π), 2.15(–ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π), 2.5(–ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏))")
            await state.update_data(height=height)
            await state.set_state(FSM.koef_state)

@rt.message(FSM.koef_state, F.text)
async def formula_6(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == FSM.koef_state:
        koef = message.text
        if koef == '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è':
            koef = 1.3
        elif koef == '–ù–∏–∑–∫–∞—è':
            koef = 1.5
        elif koef == '–£–º–µ—Ä–µ–Ω–Ω–∞—è':
            koef = 1.75
        elif koef == '–í—ã—Å–æ–∫–∞—è':
            koef = 2.15
        else:
            koef = 2.5
        flag = True
        user_data = await state.get_data()
        target = str(user_data['target'])
        sex = str(user_data['sex'])
        age = int(user_data['age'])
        weight = int(user_data['weight'])
        height = int(user_data['height'])
        koef = float(koef)
        #print(target, sex, age, weight, height,koef)
        ans = "–í–∞—à–∞ —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç "
        if sex == "M" or sex == "–ú":
            ans += str((5 + 10 * weight + 6.25 * height - 5 * age) * koef)
        else:
            ans += str((10 * weight + 6.25 * height - 5 * age - 161) * koef)
        ans += "\n–î–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–∞—à–µ–π —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞ - –°–∞–Ω –ñ–µ–æ—Ä–∞\n"
        ans += "\n\n–ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É, –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å —Å–∏–ª—É –≤ –∫—É–ª–∞–∫ –∏ –∫—É–ª–∞–∫ –≤ —Å–∏–ª—É"
        if target == "–ø–æ—Ö—É–¥–µ—Ç—å":
            ans += " –∏ –ø–æ–Ω–∏–∑–∏—Ç—å —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –Ω–∞ 300-500 –∫–∞–ª–æ—Ä–∏–π"
            ans += "\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ë–ñ–£: \n–±–µ–ª–∫–∏ - 20 %\n–∂–∏—Ä—ã - 30 %\n—É–≥–ª–µ–≤–æ–¥—ã - 50 %"
        elif target == "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å":
            ans += " –∏ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã"
            ans += "\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ë–ñ–£: \n–±–µ–ª–∫–∏ - 15 %\n–∂–∏—Ä—ã - 30 %\n—É–≥–ª–µ–≤–æ–¥—ã - 55 %"
        else:
            ans += " –∏ –ø–æ–≤—ã—Å–∏—Ç—å —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –Ω–∞ 300-500 –∫–∞–ª–æ—Ä–∏–π"
            ans += "\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ë–ñ–£: \n–±–µ–ª–∫–∏ - 12 %\n–∂–∏—Ä—ã - 30 %\n—É–≥–ª–µ–≤–æ–¥—ã - 58 %"
        ans += "\n\n–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –≥—Ä–∞–º–º–æ–≤–∫–∏ —Å—ä–µ–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –µ–¥—ã, —è –ø–æ—Å—á–∏—Ç–∞—é –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –∑–∞ –¥–µ–Ω—å –∫–∞–ª–æ—Ä–∏–∏ –∏ –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è —Å–∫–∞–∂—É, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –≤—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É"
        ans += "\n–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π - enter_meal_statistics –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞ —Å–Ω–∏–∑—É"
        ans += "\n–ö–æ–≥–¥–∞ –ø–æ–π–º–µ—Ç–µ, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –µ—Å—Ç—å, –∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£ –∑–∞ –¥–µ–Ω—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π - report  –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞ —Å–Ω–∏–∑—É"
        #await state.clear()
        await message.reply(ans, reply_markup=del_kb)
        await message.answer_photo(
                photo="https://media.istockphoto.com/id/945048938/ru/–≤–µ–∫—Ç–æ—Ä–Ω–∞—è/–Ω–∞–∑–∞–¥-—Å—Ç—Ä–µ–ª–∫–∞-–∑–Ω–∞—á–æ–∫-—Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è-—Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è-–∫—Ä—É–≥–ª–∞—è-–∫–Ω–æ–ø–∫–∞.jpg?s=612x612&w=0&k=20&c=95BOTDGGWYf7QQJAWPPJSF-J-sksNFku97AqpmFSx7Q=",
                reply_markup=get_callback_btns(btns={
                    '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': 'return'
                })
            )






@rt.message(F.text == "15")
async def cringe1(message: types.Message, state: FSMContext):
    num = int(message.text)
    await state.update_data(number=num)
    '''async with state.storage as data:
        data['num'] = num'''
    await message.reply("Number is accepted")


@rt.message(F.text == "20")
async def cringe1(message: types.Message, state: FSMContext):
    '''async with state.storage as data:
        num = data['num']'''
    user_data = await state.get_data()
    num = user_data['number']
    await message.reply(str(num))


@rt.message(F.text == "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç")
async def starring_at_product(message: types.Message, session: AsyncSession):
    product = await orm_get_product(session, "—Å–≤–∏–Ω–∏–Ω–∞ ")
    await message.answer(text=str(product.kkal))
    #await message.answer("–û–ö, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ‚è´")
